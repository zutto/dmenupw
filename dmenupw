#!/bin/bash
# Code below uses GPLV3 license. 
# See license file for more details

#---------
#settings
#---------
#directory for storing the password files
PW_DIR=~/.pwd
#editor for editing/adding pw file
EDITOR=nano
#terminal to use for reading password
TERM="xterm -bg black -fg white +sb -e"
#cipher to use for encryption / decryption
CIPHER="aes256"

#---------
# git stuff
#---------
#do note: you need to manually initialize/clone/whatever the git repo in $PW_DIR
#automatically add change commits
GIT=false
#automatically push to git remote
GITAUTOPUSH=false
#automatically pull if remote is more updated
#this might not work as expected, the pull is sent to background when run.
#I recommend running git pull from the option instead.
GITAUTOPULL=false
#---------








#init menu options
INITLIST=(
	" Select password file\n"
	"Open password file in term\n"
	"Add password file\n"
	"Modify password file\n"
	"Git push all files\n"
	"Git push\n"
	"Git pull\n"
	)


function getpw {
	PW_TEMP=$(mktemp -t ".PWDMODXXXXXXXXXX")
	e="read -s -p \"password: \" ppw; echo "'"$ppw" >>'"$PW_TEMP"
	$TERM "$e"
	realpw=$(cat "$PW_TEMP" && rm "$PW_TEMP")
	[[ -z $realpw ]] && exit 1;
	exec 3<<<"$realpw"
	realpw=""
}

function handleGitAutoPull {
	if ! $GIT; then
		return;
	fi

	if ! $GITAUTOPULL; then
		return;
	fi
	cdHandleGo
	git remote update
	STATE=$(git status -uno| grep "Your branch is behind")
	if [[ ! $STATE ]]; then 
		#no changes
		echo "no changes"
	else
		handleGitPull
	fi
	cdHandleExit
}

function handleGitPull {
	cdHandleGo
	
	git pull origin master

	cdHandleExit
}

function gitAdd {

	if ! $GIT; then
		return
	fi
	cdHandleGo
	echo "adding ./$MOD_FILE"
	git add "./$MOD_FILE";
	gitCommit

	cdHandleExit
}

function gitCommit {

	cdHandleGo

	D=$(date)

	CMSG="Automatic commit - $D"
	CMSG+="\nSource: $USER@$(hostname)"

	if [[ ! -z $MOD_FILE ]]; then
		if [[ -z $ADDED ]]; then 
			CMSG+="\nAdded file: '$MOD_FILE'";
		else 
			CMSG+="\nModified file: '$MOD_FILE'";
		fi

	fi
	git commit -m "$(printf "$CMSG")"
	cdHandleExit
}

function cdHandleGo {
	cPwd=$(pwd)
	cd $PW_DIR
}

function cdHandleExit {
	cd $cPwd
}

function handleGit {
	cdHandleGo

	D=$(date)
	git add ./*
	git commit -m "Automatic commit - $D"
	git push -u origin master


	cdHandleExit
}

function handleGitPush {
	cdHandleGo
	STATE=$(git status -uno| grep "Your branch is ahead")
	if [[ ! $STATE ]]; then 
		echo "no changes."
	else
		
		echo "pushing to master"
		git push -u origin master

		
	fi
	cdHandleExit
}

function goGit {
	if $GIT; then
		if $GITAUTOPUSH; then
			echo "git push"
			handleGitPush
		fi
	fi

}

function dmenuRender {
	RET=$(printf "$DM_DATA" | dmenu -p "$HINT" -l 25)
	[[ -z $RET ]] && exit 0;
}


if [ ! -d "$PW_DIR" ]; then
	echo "$PW_DIR does not exist, making it.";
	mkdir $PW_DIR;
fi


handleGitAutoPull &

#init menu
DM_DATA=$(printf "${INITLIST[*]}")
HINT="do you want to:"
dmenuRender






if echo $RET | grep "Select"; then 

	#select file to handle
	DM_DATA=$(ls -1a "$PW_DIR" |grep -v -E "^[\.]{0,2}$" | grep -v -i "^.git$")
	HINT="Select password file";
	dmenuRender
	PW_FILE=$RET

	#get password
	HINT="password:"
	while true; do
		getpw

		PWLIST=$(openssl enc -"$CIPHER" -in "$PW_DIR/$PW_FILE" -d -pass fd:3);
		exec 3>&-
		if [[ ! $PWLIST ]]; then 
			HINT="Wrong password, try again";
		else
			break;
		fi
	done


	#show passwords
	DM_DATA=$(echo "$PWLIST" | tr " " "\n")
	HINT="Select password to copy"
	dmenuRender

	#copy selected to clipboard
	for selection in clipboard primary; do
		echo $RET | tr -d "\n" | xsel -i --"$selection"
	done
elif echo $RET | grep "Open password file"; then

	#pw file select
	DM_DATA=$(ls -1a "$PW_DIR" |grep -v -E "^[\.]{0,2}$" | grep -v -i "^.git$")
	HINT="select password file"
	dmenuRender
	FILE=$RET;

	HINT="password:"
	while true; do
		getpw

		PWLIST=$(openssl enc -"$CIPHER" -in "$PW_DIR/$FILE" -d -pass fd:3);
		exec 3>&-

		if [[ ! $PWLIST ]]; then 
			HINT="Wrong password, try again";
		else
			break;
		fi
	done

	TEMPFILE=$(mktemp -t ".PWDMODXXXXXXXXXX")
	echo "$PWLIST" >> "$TEMPFILE" && $TERM "$EDITOR $TEMPFILE"
	rm $TEMPFILE


elif echo $RET | grep "Add"; then 
	#new file name
	DM_DATA="";
	HINT="Name of file"
	dmenuRender
	NEWFILE=$RET;

	#pw
	getpw

	#tmp file for editing
	TEMPFILE=$(mktemp -t ".PWDMODXXXXXXXXXX")
	$TERM "$EDITOR $TEMPFILE"

	#rm new file & get contents
	#NEWDATA=$(cat $TEMPFILE && rm $TEMPFILE);

	#write
	openssl enc -"$CIPHER" -in "$TEMPFILE" -out "$PW_DIR/$NEWFILE" -pass fd:3
	rm "$TEMPFILE"
	exec 3>&-

	MOD_FILE=$NEWFILE
	ADDED=true #added
	gitAdd 
	#autogit
	goGit
elif echo $RET | grep "Modify"; then

	#pw file select
	DM_DATA=$(ls -1a "$PW_DIR" |grep -v -E "^[\.]{0,2}$" | grep -v -i "^.git$")
	HINT="select password file"
	dmenuRender
	FILE=$RET;

	HINT="password:"
	while true; do
		getpw
		read -u 3 TPW
		exec 3>&-

		PWLIST=$(exec 3<<<"$TPW" && openssl enc -"$CIPHER" -in "$PW_DIR/$FILE" -d -pass fd:3);
		exec 3>&-

		if [[ ! $PWLIST ]]; then 
			HINT="Wrong password, try again";
		else
			break;
		fi
	done

	TEMPFILE=$(mktemp -t ".PWDMODXXXXXXXXXX")
	echo "$PWLIST" >> "$TEMPFILE" && $TERM "$EDITOR $TEMPFILE"

	NEWDATA=$(cat $TEMPFILE && rm $TEMPFILE);
	exec 3<<<"$TPW" && printf "$NEWDATA" | openssl enc -"$CIPHER" -out "$PW_DIR/$FILE" -pass fd:3
	exec 3>&-
	
	MOD_FILE=$NEWFILE
	ADDED=false #modified
	gitAdd
	goGit
elif echo $RET | grep "Git push all files"; then
	handleGit
elif echo $RET | grep "Git push"; then
	handleGitPush
elif echo $RET | grep "Git pull"; then
	handleGitPull
fi

exit 0;